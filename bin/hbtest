#!/usr/bin/php -dopen_basedir=.
<?php

require_once('inc/utils.inc');

if (count($argv) < 3) {
    print_help();
}

$test_times = (count($argv) > 3) ? $argv[3] : 100000;
if ($argv[1] == 'none') {
    warn("###do $test_times loop test");
    $start_time = microtime(true);
    for ($i = 1; $i < $test_times;$i++) {
    }
    $duration = microtime(true) - $start_time;
    warn("Run $test_times times nop takes $duration seconds");
    exit();
}

$input = file_get_contents($argv[2]);
$vars = json_decode($input, true);
warn("### Input:\n$input\n### as PHP:");
warn(print_r($vars, true));

// Prepare template
$flag = 0;
if ($argv[1] == 'lightncandy') {
    require_once('cloned/lightncandy/src/lightncandy.inc');
    $flag = LightnCandy::FLAG_ERROR_LOG;
    if (($test_times % 2) == 1) {
        $flag += LightnCandy::FLAG_HANDLEBARSJS;
    }
}
try {
    prepare_tmpl($argv[1], preg_replace('/(-\d+)*\.json/', '.tmpl', $argv[2]), Array('flags' => $flag));

    // Execute template
    @$result = $test_tmpl ? $test_tmpl->$test_method($vars) : $test_method($vars);

    if ($argv[1] == 'lightncandy') {
        print "### Handlebar usage:\n";
        print_r(LightnCandy::getContext());
    }
} catch (Excaption $e) {
    $result = false;
}

warn("### Output:\n$result");

$standard = file_get_contents(preg_replace('/\.json/', '.txt', $argv[2]));
file_put_contents(preg_replace('/\.json/', ".$argv[1].txt", $argv[2]), $result);
$match = 'YES';
if ($result !== $standard) {
    if (preg_replace('/\r|\n/', '', $result) === preg_replace('/\r|\n/', '', $standard)) {
        warn("!!!!! ERROR: the output is not exact same with fixture (more or less CR/LF)\n");
        $match = 'CR/LF';
    } else if (preg_replace('/\'/', '&#x27;', $result) === $standard) {
        warn("!!!!! ERROR: the output is not exact same with fixture (single quote not encoded)\n");
        $match = 'SINGLEQUOTE';
    } else if (preg_replace('/&#039;/', '&#x27;', $result) === $standard) {
        warn("!!!!! ERROR: the output is not exact same with fixture (urlencode difference on single quote)\n");
        $match = 'QUOTE';
    } else if ($result == false) {
        warn("!!!!! ERROR: the lib do not support this feature\n");
        $match = 'NO';
    } else {
        warn("!!!!! ERROR: the output is not same with fixture\n");
        $match = 'OUTPUT';
    }
    print "# STANDARD:\n$standard\n";
}

if (($match !== 'NO') && ($match !== 'OUTPUT')) {
    warn("###do $test_times loop test");

    $start_time = microtime(true);
    if ($test_tmpl) {
        for ($i = 1; $i < $test_times;$i++) {
            $test_tmpl->$test_method($vars);
        }
    } else {
        for ($i = 1; $i < $test_times;$i++) {
    /* skip php warning */
    @        $test_method($vars);
        }
    }
    $duration = microtime(true) - $start_time;
    warn("Render $test_times times with $argv[1] lib takes $duration seconds");
} else {
    warn("Skip $test_times times test with $argv[1] lib due to result bad");
    $duration = 0;
}

print json_encode(Array(
    'lib' => $argv[1],
    'test' => $argv[2],
    'loop' => $test_times,
    'time' => $duration,
    'match' => $match
));

function print_help() {
    global $argv;

    print <<<PRINTEND

usage: $argv[0] libName testFile [testTimes]

    libName = one of: none , lightncandy , handlebars.php , mustache-php , mustache.php 
    testTimes = default is 100000

    Example: $argv[0] mustache.php fixture/001-simple-vars-001.json


PRINTEND
    ;
    exit(1);
}

?>
